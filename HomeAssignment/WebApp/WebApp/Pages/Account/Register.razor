@page "/register"
@using WebApp.Models
@inject HttpClient Http
@inject NavigationManager Nav
@inject WebApp.Services.AuthService Auth

<h3>Register</h3>

<EditForm Model="@registration" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Username</label>
        <InputText class="form-control" @bind-Value="registration.Username" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="registration.Email" />
    </div>

    <div class="mb-3">
        <label class="form-label">Password</label>
        <InputText class="form-control" type="password" @bind-Value="registration.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger mt-3">@Error</div>
}

@code {
    private RegisterDTO registration = new();
    private string Error = "";

    private async Task HandleRegister()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "customer/register")
                {
                    Content = JsonContent.Create(registration)
                };
            Auth.AttachToken(request);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/login");
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                Error = $"Registration failed. {content}";
            }
        }
        catch (Exception ex)
        {
            Error = $"Error: {ex.Message}";
        }
    }
}
