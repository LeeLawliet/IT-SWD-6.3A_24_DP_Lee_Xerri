@page "/bookings/create"
@using System.ComponentModel.DataAnnotations
@using WebApp.Models
@inject HttpClient Http
@inject NavigationManager Nav
@inject WebApp.Services.AuthService Auth

<h3>Create Booking</h3>

<EditForm Model="@booking" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Start Location</label>
        <InputText class="form-control" @bind-Value="booking.StartLocation" />
    </div>

    <div class="mb-3">
        <label class="form-label">End Location</label>
        <InputText class="form-control" @bind-Value="booking.EndLocation" />
    </div>

    <div class="mb-3">
        <label class="form-label">Passengers</label>
        <InputNumber class="form-control" @bind-Value="booking.Passengers" />
        <ValidationMessage For="@(() => booking.Passengers)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Cab Type</label>
        <InputSelect class="form-select" @bind-Value="booking.CabType">
            <option value="">-- Select Cab Type --</option>
            @foreach (var cab in CabTypes) // limit the choice of cabs to Economic, Premium, and Executive
            {
                <option value="@cab">@cab</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => booking.CabType)" />
    </div>

    <button class="btn btn-primary" type="submit">Create Booking</button>
</EditForm>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger mt-3">@Error</div>
}

@code {
    private CreateBookingDTO booking = new();
    private string Error = "";
    private List<string> CabTypes = new() { "Economic", "Premium", "Executive" };

    private async Task HandleSubmit()
    {
        try
        {
            var req = new HttpRequestMessage(HttpMethod.Post, "booking")
                {
                    Content = JsonContent.Create(booking)
                };
            Auth.AttachToken(req);

            var res = await Http.SendAsync(req);
            if (res.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/bookings/current");
            }
            else
            {
                Error = $"Booking creation failed.\n{res}";
            }
        }
        catch (Exception ex)
        {
            Error = $"Error: {ex.Message}";
        }
    }
}
